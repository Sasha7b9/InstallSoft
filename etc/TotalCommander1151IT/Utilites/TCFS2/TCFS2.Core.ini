; TCFS2.Core.ini

; This file contains pre-defined definitions, that will be used if not defined in TCFS2.ini
; Этот файл содержит определения команд, которые будут использоваться, если не определены в TCFS2.ini

; Please do not modify this file, write your new or overloaded definitions to TCFS2.ini instead
; Пожалуйста, не изменяйте этот файл, добавляйте новые или переопределённые команды в TCFS2.ini


[Items]
; Commands
; Команды

; Id=apply_cmd1(...) [apply_cmd2(...) ...] [, check_cmd(...) [, undo_id1 [undo_id2 ...] [, undo_check_cmd(...)]]] [| apply_cmdN(...) ...] [; Description]

; You may specify more than one command line in single id, just divide them with '|' - only one will be executed (w/o condition or with true condition)
; Допустимо указывать несколько командных строк для одного id, разделяя их символом '|' - выполнена будет только одна (первая безусловная или с истинным условием)

; Window Management Commands
; Команды управления окном

; Restore Window
; Восстановить
m0=show(9), eval(isMaximized), m1

; Maximize Window
; Развернуть
m1=show(3), eval(!isMaximized), m0

; Maximize/Restore Switch
; Развернуть/Восстановить
m2=show(isMaximized ? 9 : 3), , m2

; Caption Off
; Скрыть заголовок
c0=set_style(# & ~$00C00000), eval(hasCaption), c1

; Caption On
; Показать заголовок
c1=set_style(# | $00C00000), eval(!hasCaption), c0

; Caption Switch
; Переключить заголовок
c2=set_style(# ^ $00C00000), , c2

; Disable On Top
; Выключить режим поверх всех окон
t0=move(, , , , 0), eval(isTopmost), t1

; Enable On Top
; Включить режим поверх всех окон
t1=move(, , , , 1), eval(!isTopmost), t0

; Switch On Top
; Переключить режим поверх всех окон
t2=move(, , , , isTopmost ? 0 : 1), , t2

; Disable/enable TC window redraw. Parameter: 1 or 0
; Запретить/разрешить перерисовку окна ТК. Параметр: 1 или 0
locktc=msg($0B, #1-0 > 0 ? 0 : 1, 0)

; Redraw entire TC window
; Полностью перерисовать окно ТК
redraw=redraw()

; Redraw TC window and active panel's cursor (it may disappear after redraw locking)
; Перерисовать окно ТК и курсор в активной панели (он может исчезать после блокировки перерисовки)
update=redraw() tcm(2918)

; Select combobox element that starts with given text. Parameters: text, combobox handle, search mode (0 - full text, 1 - beginning)
; Выбрать в выпадающем списке элемент, начинающийся с заданного текста. Параметры: текст, дескриптор окна, режим поиска (0 - точное совпадение, 1 - начало)
select=eval(select(#1, #2, #3))

; Set window text. Parameters: text, window handle (if not set, main window used)
; Установить текст окна. Параметры: текст, дескриптор окна (если не задан, используется главное окно)
settext=eval(settext(#1, #2))


; Built-in TC Commands
; Встроенные команды ТК

; Reread
; Обновить окно
rr=tcm(540)

; Buttonbar Hide
; Скрыть панель инструментов
tb0=tcm(2901), eval(hasButtonBar), tb1

; Buttonbar Show
; Показать панель инструментов
tb1=tcm(2901), eval(!hasButtonBar), tb0

; Drivebar Hide
; Скрыть панель кнопок дисков
db0=tcm(2902), eval(hasDriveBar), db1

; Drivebar Show
; Показать панель кнопок дисков
db1=tcm(2902), eval(!hasDriveBar), db0

; Use single drive bar
; Использовать одну панель кнопок дисков
2b0=tcm(2903), eval(hasDriveBar2), 2b1

; Use two drive bars
; Использовать две панели кнопок дисков
2b1=tcm(2903), eval(!hasDriveBar2), 2b0

; Drive Combo Hide
; Скрыть окно выбора дисков
dc0=tcm(2906), eval(hasDriveCombo), dc1

; Drive Combo Show
; Показать окно выбора дисков
dc1=tcm(2906), eval(!hasDriveCombo), dc0

; Directory Tabs Disable (if you close TC, you'll lost all tabs!)
; Отключить вкладки каталогов (при закрытии ТК все вкладки удалятся!)
dt0=tcm(2916), eval(hasDirTabs), dt1

; Directory Tabs Enable
; Включить вкладки каталогов
dt1=tcm(2916), eval(!hasDirTabs), dt0

; Path Bars Hide
; Скрыть заголовки текущих путей
cd0=tcm(2907), eval(hasPathHeader), cd1

; Path Bars Show
; Показать заголовки текущих путей
cd1=tcm(2907), eval(!hasPathHeader), cd0

; Tabstop Headers Hide
; Скрыть заголовки табуляторов
th0=tcm(2908), eval(hasTabHeader), th1

; Tabstop Headers Show
; Показать заголовки табуляторов
th1=tcm(2908), eval(!hasTabHeader), th0

; Status Bar Hide
; Скрыть строку состояния
sb0=tcm(2909), eval(hasStatusBar), sb1

; Status Bar Show
; Показать строку состояния
sb1=tcm(2909), eval(!hasStatusBar), sb0

; Command Line Hide
; Скрыть командную строку
cl0=tcm(2910), eval(hasCmdLine), cl1

; Command Line Show
; Показать командную строку
cl1=tcm(2910), eval(!hasCmdLine), cl0

; F-Keys Hide
; Скрыть кнопки функциональных клавиш
kb0=tcm(2911), eval(hasKeyButtons), kb1

; F-Keys Show
; Показать кнопки функциональных клавиш
kb1=tcm(2911), eval(!hasKeyButtons), kb0


; Examples of moving window
; Примеры перемещения окна

; Resize window to 800x600
; Изменить размер окна на 800x600
r1=move(, , 800, 600)

; Move window to (0, 0)
; Переместить окно на позицию (0, 0)
r2=move(0, 0, , )

; Resize window left by 100 px
; Растянуть окно влево на 100 пикселей
r3=move(#-100, , #+100)

; Move window down by 100 px
; Опустить окно на 100 пикселей
r4=move(, #+100)

; Resize window to 800x600 and move to right upper screen corner
; Изменить размер окна на 800x600 и поместить в верхний правый угол экрана
r5=move(@-800, 0, 800, 600)

; Set window width to screen width and height to screen height minus 4 pixels
; Установить ширину окна по ширине экрана, а высоту - по высоте экрана минус 4 пикселя
r6=move(0, 0, @, @-4)

; Move window to right bottom corner and resize to 0.8 of screen width and 0.7 of screen height
; Поместить окно в правый нижний угол с размерами 0.8 от ширины и 0.7 от высоты экрана
r7=move(@*2/10+1, cyWorkArea-@*7/10+1, @*8/10, @*7/10)


; Switch between large and medium window sizes
; Переключить между большим и средним размером окна
switch_sp=move(# ? 0 : @*7/64, # ? 0 : @*7/64, @-# ? @ : @*25/32, cyWorkArea-# ? cyWorkArea : @*25/32), , switch_sp

; Send system menu "Move" command
; Послать команду "Перместить" системного меню
sys_move=msg($0112, $F010, 0, 1) msg($0100, $26, $01000001, 1) msg($0101, $26, $C1000001, 1)


; Auxiliary Commands
; Вспомогательные команды

; Switch to fullscreen mode by calling fs action (if window title is not hidden) or calls fs_undo action
; Переключить в полноэкранный режим, вызвав действие fs (если заголовок окна ТК не скрыт), или выполнить действие отката fs_undo
fs2=if(hasCaption, locktc(1) + run_action(fs) + locktc(0) + show(3) + save_undo(fs_undo), show(9) + locktc(1) + run_action(fs_undo) + locktc(0)) run_item(update)

; Move window after switching caption so client area preserves position (if window is not maximized)
; Переместить окно после переключения заголовка, чтобы сохранить позицию клиентской области (если окно не развернуто)
cfixm0=, eval(isMaximized) | if(hasCaption, move(#-1, #-cyCaption-1, #+2, #+cyCaption+2), move(#+1, #+cyCaption+1, #-2, #-cyCaption-2)), , cfixm0

; Cause window update to be performed after style change (if window is maximized)
; Обновить окно после изменения стилей (если окно развернуто)
cfixm1=run_item(update), eval(isMaximized), cfixm1


; Increase buttonbar buttons size by 1 px
; Увеличить размер кнопок панели инструментов на 1 пиксель
bb_inc=tcm(2901) set_tcini(Buttonbar,Buttonheight,#+1) tcm(2901), tcini(Layout,ButtonBar,1,1), bb_dec | set_tcini(Buttonbar,Buttonheight,#+1) tcm(2901), , bb_dec

; Decrease buttonbar buttons size by 1 px
; Уменьшить размер кнопок панели инструментов на 1 пиксель
bb_dec=tcm(2901) set_tcini(Buttonbar,Buttonheight,#-1) tcm(2901), tcini(Layout,ButtonBar,1,1), bb_inc | set_tcini(Buttonbar,Buttonheight,#-1) tcm(2901), , bb_inc


; Pass up to 8 different strings to send function (arguments: optional hwnd and 1-8 strings)
; Последовательно послать окну с помощью функции send до 8 строк (в параметрах указываются дескриптор окна и 1-8 строк через запятую)
multi_send=if(!null(#2), send(#2, #1) + run_item(#0, #1, #3, #4, #5, #6, #7, #8, #9))


; Switch to another ignore list (if ignore list was enabled, it will be enabled after switching)
; Сменить список исключений на указанный (если опция была выключена, она будет включена после смены списка)
switch_ignore_list=if(isIgnoreListEnabled, tcm(2922)+set_tcini(Configuration,IgnoreListFile,#1)+tcm(2922), set_tcini(Configuration,IgnoreListFile,#1))


; Commands to move file panels separator (active TCFS2Tools.dll required)
; Команды для перемещения разделителя файловых панелей (необходим активный TCFS2Tools.dll)

; Set separator position. Parameter: left panel %-width
; Установить положение разделителя. Параметр: %-ширина левой панели
set_separator=msg($0433, tt_SeparatorSet, #1)

; Set active panel width. Parameter: active panel %-width
; Установить указанную ширину активной панели. Параметр: %-ширина активной панели
sp_set_active=run_item(set_separator, L_isActive ? (#1) : 100 - (#1))


; Move separator using mouse (click to apply)
; Переместить разделитель, двигая мышь (щелчок мыши закрепляет позицию)
sp_move=run_item(set_separator, -1)

; Move separator by 10% to rigth/left
; Переместить разделитель на 10% вправо/влево
sp_inc=run_item(set_separator, sepPos+10)
sp_dec=run_item(set_separator, sepPos-10)

; Increase separator position by 20% or set it to 20% if greater or equal than 80%
; Передвинуть разделитель на 20% вправо, или переставить на позицию 20%, если оно достигло 80%
sp_inc_r=run_item(set_separator, if(sepPos > 80, 20, sepPos + 20))

; Set separator position to 0%-100%
; Установить положение разделитель в 0%-100%
sp_set0=run_item(set_separator, 0)
sp_set20=run_item(set_separator, 20)
sp_set40=run_item(set_separator, 40)
sp_set60=run_item(set_separator, 60)
sp_set80=run_item(set_separator, 80)
sp_set100=run_item(set_separator, 100)


; Commands to control main menu (active TCFS2Tools.dll required)
; Команды управления главным меню (необходим активный TCFS2Tools.dll)

; Hide main menu string
; Скрыть строку главного меню
mm0=tcm(tt_HideMainMenu)

; Show main menu string
; Показать строку главного меню
mm1=tcm(tt_ShowMainMenu)

; Switch main menu string
; Переключить строку главного меню
mm2=tcm(tt_SwitchMainMenu)

; Display main menu as popup menu
; Открыть главное меню в виде всплывающего
mm_track=tcm(tt_TrackMainMenu)


; Commands to switch between panel view modes and scroll lists (active TCFS2Tools.dll required)
; Команды для переключения режимов панелей и прокрутки (необходим активный TCFS2Tools.dll)

; Switch between given and previous view mode in left panel. Parameter: vew mode
; Переключиться между указанным и предыдущим режимом левой панели. Параметр: режим
switch_viewmode_L=set_tcini(left, LastViewMode, L_viewMode) tcm(#1), eval(L_viewMode != (#1)) | tcm(tcini(left, LastViewMode, #))

; Switch between given and previous view mode in right panel. Parameter: vew mode
; Переключиться между указанным и предыдущим режимом правой панели. Параметр: режим
switch_viewmode_R=set_tcini(right, LastViewMode, R_viewMode) tcm(#1), eval(R_viewMode != (#1)) | tcm(tcini(right, LastViewMode, #))

; Switch between given and previous view mode in active panel. Parameter: vew mode
; Переключиться между указанным и предыдущим режимом активной панели. Параметр: режим
switch_viewmode_S=run_item(switch_viewmode_L, #1-200), eval(L_isActive) | run_item(switch_viewmode_R, #1-100)


; Scroll filelist left/right. Parameters: panel (1 - left, 2 - right), number of pages to scroll
; Прокрутить список вправо/влево. Параметры: панель (1 - левая, 2 - правая), число страниц для прокрутки
scroll_list_h=loop(@<=(if(#2>0,#2,-#2)) + 0*sendmsg(msg(WM_TC_COMMAND, tt_GetPanel, #1), $0114, if(#2>0,3,2), 0))

; Scroll filelist up/down. Parameters: panel (1 - left, 2 - right), number of pages to scroll
; Прокрутить список вверх/вниз. Параметры: панель (1 - левая, 2 - правая), число страниц для прокрутки
scroll_list_v=loop(@<=(if(#2>0,#2,-#2)) + 0*sendmsg(msg(WM_TC_COMMAND, tt_GetPanel, #1), $0115, if(#2>0,3,2), 0))

; Scroll filelist somehow. Parameters: panel (1 - left, 2 - right), number of pages to scroll
; Прокрутить список как-нибудь. Параметры: панель (1 - левая, 2 - правая), число страниц для прокрутки
scroll_list=if(#1==2 ? R_viewMode==201 : L_viewMode==101, run_item(scroll_list_h, #1, #2), run_item(scroll_list_v, #1, #2))


; Scroll filelist somehow. Parameters: panel (1 - left, 2 - right), number of pages to scroll
; Встроенные функции и параметры:
;
; 0
; 1
; if(<condition>, [<true_expression>], [<false_expression>])
; loop(<expression>)
; for(<expression>, [<from>], [<to>], [<step>])
; foreach(<expression>, [<val1>, [...]])
; eval(<expression>)
; null(<something>)
; style([<value>], [<exvalue>])
; tcini(<section>, <key>, <value>|`<string_value>`, [<error_value>], [<flags>])
; ini(`<ini_file>`, <section>, <key>, <value>|`<string_value>`, [<error_value>], [<flags>])
; msg(<umsg>, <wparam>, <lparam>, [<async_mode>])
; regmsg(<msg_name>)
; findwnd([`<class>`], [`<text>`], [<parent>], [<zindex>], [<flags>])
; tcd([`<left_path>`], [`<right_path>`], [S][T], [<async_mode>])
; tcm(<cm_index>, [<async_mode>])
; tem(`<em_command_name> [<parameters>]`, [<async_mode>])
; send([@]`<keystrokes>`, [<hwnd>])
; sendmsg(<hwnd>, <umsg>, <wparam>, <lparam>, [<async_mode>])
; varcnt()
; varget(<n>)
; varset(<n>, <x>)
;
; show(<state>)
; move([<x>], [<y>], [<cx>], [<cy>], [<topmost>])
; redraw()
; run_item(<item_name>, [<params>])
; run_action(<action_name>)
; set_style([<value>], [<exvalue>])
; set_tcini(<section>, <key>, [<value>]|`<string_value>`, [<error_value>], [<flags>])
; set_ini(`<inipath>`, <section>, <key>, [<value>]|`<string_value>`, [<error_value>])
; save_undo(<undo_name>)
; delay(<msec>)

; Built-in macros:
; Встроенные макросы:
;
; @sid


[Macros]
; Some constants for show function
; Некоторые константы для функции show
SW_HIDE=0
SW_SHOWMAXIMIZED=3
SW_MINIMIZE=6
SW_RESTORE=9


; Some flags for style/set_style functions
; Некоторые флаги для функций style/set_style

; Window has title bar (caption)
; Окно имеет заголовок
WS_CAPTION=$00C00000

; Window is maximized
; Окно развёрнуто
WS_MAXIMIZE=$01000000

; Window is visible
; Окно видимо
WS_VISIBLE=$10000000

; Window is minimized
; Окно свёрнуто
WS_MINIMIZE=$20000000

; Window is on top
; Окно поверх других окон
WS_EX_TOPMOST=$00000008

; Window has small title bar and no taskbar button
; Окно имеет узкий заголовок и не имеет кнопки на панели задач
WS_EX_TOOLWINDOW=$00000080


; Some constants for msg function
; Некоторые константы для функции msg

; Send internal TC commands (internal TC message)
; Посылает внутреннюю команду ТК (внутреннее сообщение ТК)
WM_TC_COMMAND=$0433

; Enable/disable window redraw
; Разрешает/запрещает перерисовку окна
WM_SETREDRAW=$0B

; Imitate pressing a key
; Имитирует зажатие клавиши
WM_KEYDOWN=$0100

; Imitate releasing a key
; Имитирует отпускание клавиши
WM_KEYUP=$0101

; Send special commands from windows system menu
; Посылает специальную команду из системного меню окна
WM_SYSCOMMAND=$0112

; Some virtual-key codes
; Некоторые виртуальные коды клавиш

; Control
VK_CONTROL=$11

; Escape
VK_ESCAPE=$1B

; Left mouse button (LMB)
; Левая кнопка мыши (ЛКМ)
VK_LBUTTON=$01

; Right mouse button (RMB)
; Правая кнопка мыши (ПКМ)
VK_RBUTTON=$02

; Middle mouse button (MMB)
; Средняя кнопка мыши (СКМ)
VK_MBUTTON=$04

; Alt
VK_MENU=$12

; Shift
VK_SHIFT=$10


; Flags for tcini/set_tcini/ini functions
; Флаги для функций tcini/set_tcini/ini
ini_Redirection=$01
ini_StrCmpCase=$8000


; Some helper functions
; Некоторые вспомогательные функции


; Return first non-empty value. Parameters: two values
; Возвращает первое непустое значение. Параметры: два значения
if_empty=if(null(#1), #2, #1)

; Disable/enable TC window redraw. Parameter: 1 or 0
; Запретить/разрешить перерисовку окна ТК. Параметр: 1 или 0
locktc=msg($0B, #1-0 > 0 ? 0 : 1, 0)

; Select combobox element that starts with given text. Parameters: text, combobox handle, search mode (0 - full text, 1 - beginning)
; Выбрать в выпадающем списке элемент, начинающийся с заданного текста. Параметры: текст, дескриптор окна, режим поиска (0 - точное совпадение, 1 - начало)
select=sendmsg(#2, $014E, sendmsg(#2, if(#3-0, $014C, $0158), 0, #1))

; Set window text. Parameters: text, window handle (if not set, main window used)
; Установить текст окна. Параметры: текст, дескриптор окна (если не задан, используется главное окно)
settext=if(null(#2), msg($0C, 0, `` #1), sendmsg(#2, $0C, 0, `` #1))

; Wait until condition becomes true (checks once per second). Parameters: condition to be checked and number of seconds to wait
; Ожидает, пока условие не станет истинным, проверяя раз в секунду. Первый параметр - условие, второй - число секунд ожидания
wait_for=loop(@<=(#2) && if(#1, 0, delay(1000)))

; Wait for window and send keys to it. Parameters: keypresses, window handle expression, number of seconds to wait (5 by default)
; Ожидает появления окна и отправляет ему нажатия клавиш. Параметры: строка с нажатиями, формула дескриптора окна, число секунд (по умолчанию 5)
send_wait=loop(@<=if_empty(#3,5)*20 && if(#2,sendmsg(#2)*send(#1,#2)*0,delay(50)))

; Wait for combobox and select its element that starts with given text. Parameters: text, combobox handle expression, search mode (0 - full text, 1 - beginning), number of seconds to wait (5 by default)
; Ожидает появления выпадающего списка и выбирает в нём элемент, начинающийся заданной строкой. Параметры: текст, формула дескриптора выпадающего списка, режим поиска (0 - точное совпадение, 1 - начало), число секунд (по умолчанию 5)
select_wait=loop(@<=if_empty(#4,5)*20 && if(#2,select(#1,#2,#3)*0,delay(50)))

; Wait for window and set its text. Parameters: text, window handle expression, number of seconds to wait (5 by default)
; Ожидает появления окна и задаёт ему текст. Параметры: текст, формула дескриптора окна, число секунд (по умолчанию 5)
settext_wait=loop(@<=if_empty(#3,5)*20 && if(#2,settext(#1,#2)*0,delay(50)))


; Some functions that check window state
; Некоторые функции для проверки состояния окна


; True if buttonbar is not disabled in wincmd.ini
; Истина, если панель инструментов не отключена в wincmd.ini
hasButtonBar=tcini(Layout, ButtonBar, 1, 1)

; True if drive bar is enabled in wincmd.ini
; Истина, если панель кнопок дисков не отключена в wincmd.ini
hasDriveBar=tcini(Layout, DriveBar1, 1)

; True if two drive bars mode enabled in wincmd.ini
; Истина, если в wincmd.ini включено использование двух панелей кнопок дисков
hasDriveBar2=tcini(Layout, DriveBar2, 1)

hasDriveCombo=tcini(Layout, DriveCombo, 1)
hasDirTabs=tcini(Layout, DirectoryTabs, 1)
hasPathHeader=tcini(Layout, CurDir, 1)
hasTabHeader=tcini(Layout, TabHeader, 1)
hasStatusBar=tcini(Layout, StatusBar, 1)
hasCmdLine=tcini(Layout, CmdLine, 1)
hasKeyButtons=tcini(Layout, KeyButtons, 1)

hasCaption=style(# & $00C00000)
isMaximized=style(# & $01000000)
isTopmost=style(, # & $08)


; Configuration parameters
; Параметры конфигурации

isIgnoreListEnabled=tcini(Configuration, IgnoreListFileEnabled, 1, 1)


; Some default TCFS2Tools command numbers (may be changed in TCFS2Tools.ini)
; Некоторые стандартные номера команд TCFS2Tools (могут быть изменены в TCFS2Tools.ini)

tt_ShowMainMenu=65537
tt_HideMainMenu=65538
tt_SwitchMainMenu=65539
tt_TrackMainMenu=65540
tt_GetWindowMetrics=65550
tt_LeftIsActive=65551
tt_RightIsActive=65552
tt_LeftGetViewMode=65553
tt_RightGetViewMode=65554
tt_IsVerticalPanels=65555
tt_GetPanel=65556
tt_FocusGet=65557
tt_FocusSet=65558
tt_SeparatorGet=65561
tt_SeparatorSet=65562
tt_GetSystemMetrics=65570
tt_GetWorkArea=65571
tt_GetAsyncKeyState=65572
tt_GetSomeInfo=65573
tt_LeftTabIndex=65580
tt_RightTabIndex=65581
tt_LeftTabCount=65582
tt_RightTabCount=65583
tt_LeftTabSetIndex=65584
tt_RightTabSetIndex=65585
tt_LeftTabIsLocked=65586
tt_RightTabIsLocked=65587
tt_RegRead=regmsg(TCFS2.RegRead)
tt_RegWrite=regmsg(TCFS2.RegWrite)
tt_RegCount=regmsg(TCFS2.RegCount)


; Some commands retrieving information (active TCFS2Tools.dll required)
; Некоторые команды, возвращающие информацию (необходим активный TCFS2Tools.dll)


; Get sysmet metric. Parameter: index
; Возвращает системную метрику. Параметр: индекс метрики
GetSystemMetrics=msg($0433, tt_GetSystemMetrics, #1)

; Get state of virtual-key. Parameter: key code
; Возвращает состояние виртуальной клавиши. Параметр: код клавиши
GetAsyncKeyState=msg($0433, tt_GetAsyncKeyState, #1)

; Get number of milliseconds since Windows start
; Возвращает количество миллисекунд с момента загрузки Windows
GetTickCount=msg($0433, tt_GetSomeInfo, 0)


; Height of window title (caption)
; Высота заголовка окна
cyCaption=msg($0433, tt_GetSystemMetrics, 4)

; Width of desktop work area (w/o taskbar)
; Ширина рабочей области экрана (без панели задач)
cxWorkArea=msg($0433, tt_GetWorkArea, 0)

; Height of desktop work area (w/o taskbar)
; Высота рабочей области экрана (без панели задач)
cyWorkArea=msg($0433, tt_GetWorkArea, 1)

; Horizontal position of desktop work area position (w/o taskbar)
; Горизонтальная позиция рабочей области экрана (без панели задач)
xWorkArea=msg($0433, tt_GetWorkArea, 2)

; Vertical position of desktop work area (w/o taskbar)
; Вертикальная позиция рабочей области экрана (без панели задач)
yWorkArea=msg($0433, tt_GetWorkArea, 3)

; Width of primary screen
; Ширина основного экрана
cxScreen=GetSystemMetrics(0)

; Height of primary screen
; Высота основного экрана
cyScreen=GetSystemMetrics(1)


; True if Shift/Ctrl/Alt/RMB/MMB is down at this moment
; Истина, если Shift/Ctrl/Alt/ПКМ/СКМ зажата в данный момент
pressedShift=msg($0433, tt_GetAsyncKeyState, $10) < 0
pressedCtrl=msg($0433, tt_GetAsyncKeyState, $11) < 0
pressedAlt=msg($0433, tt_GetAsyncKeyState, $12) < 0
pressedRButton=msg($0433, tt_GetAsyncKeyState, $02) < 0
pressedMButton=msg($0433, tt_GetAsyncKeyState, $04) < 0


; Coordinate X of TC window
; Координата X окна ТК
xTcWindow=msg($0433, tt_GetWindowMetrics, 0)

; Coordinate Y of TC window
; Координата Y окна ТК
yTcWindow=msg($0433, tt_GetWindowMetrics, 1)

; Width of TC window
; Ширина окна ТК
wTcWindow=msg($0433, tt_GetWindowMetrics, 2)

; Height of TC window
; Высота окна ТК
hTcWindow=msg($0433, tt_GetWindowMetrics, 3)

; Coordinate X of TC window client part (w/o title, menu and borders)
; Координата X клиентской части окна ТК (без заголовка, меню и границ)
xTcWindowCli=msg($0433, tt_GetWindowMetrics, 4)

; Coordinate Y of TC window client part
; Координата Y клиентской части окна ТК
yTcWindowCli=msg($0433, tt_GetWindowMetrics, 5)

; Width of TC window client part
; Ширина клиентской части окна ТК
wTcWindowCli=msg($0433, tt_GetWindowMetrics, 6)

; Height of TC window client part
; Высота клиентской части окна ТК
hTcWindowCli=msg($0433, tt_GetWindowMetrics, 7)

; Handle of focused component of active TC window
; Дескриптор активного оконного элемента активного окна ТК
getFocus=msg($0433, tt_FocusGet)


; True if vertical panels arrangement is enabled
; Истина, если панели отображаются одна над другой
isVerticalPanels=msg($0433, tt_IsVerticalPanels)

; Current file panels separator position
; Текущая позиция разделителя файловых панелей
sepPos=msg($0433, tt_SeparatorGet)

; True if left panel is active
; Истина, если левая панель активна
L_isActive=tcm(tt_LeftIsActive)

; True if right panel is active
; Истина, если правая панель активна
R_isActive=tcm(tt_RightIsActive)

; Return cm_Left* command for current left panel's view mode
; Возвращает команду cm_Left* для текущего режима левой панели
L_viewMode=tcm(tt_LeftGetViewMode)

; Return cm_Right* command for current right panel's view mode
; Возвращает команду cm_Right* для текущего режима правой панели
R_viewMode=tcm(tt_RightGetViewMode)

; Return cm_Src* command for current active panel's view mode
; Возвращает команду cm_Src* для текущего режима активной панели
S_viewMode=if(L_isActive, L_viewMode+200, R_viewMode+100)


; Read/write TCFS2Tools registers commands
; Команды для чтения/записи регистров TCFS2Tools

; Return value from register with given index. Parameters: register index, value in case of error
; Возвращает значение, записанное в регистр с заданным индексом. Параметры: индекс регистра, значение при ошибке
regread=msg(tt_RegRead, #1, #2-0)

; Store a value in register with given index and return index on success. Parameter: register index (nonzero)
; Сохраняет значение в регистре с заданным индексом и возвращает индекс в случае успеха. Параметр: индекс регистра (ненулевой)
regwrite=msg(tt_RegWrite, #1, #2)

; Return number of available registers
; Возвращает число доступных регистров хранения
regcount=msg(tt_RegCount)


[Actions]
; Actions
; Действия

; Name=Id1 Id2 Id3 ... [; Description]

; "Undo" is a built-in command that keeps list of last operation undo Ids
; "Undo" - это встроенный элемент, содержащий список команд для отмены последнего действия

; Full-screen switch action (disables most extra elements)
; Переключение в полноэкранный режим (отключает большинство вспомогательных элементов)
fs=c0 db0 dc0 cd0 th0 sb0 cl0 kb0

; Reversive full-screen switcher (calls fs action or fs_undo)
; Реверсивный переключатель полноэкранного режима (вызывает действие fs или fs_undo)
fs2=fs2

; Switch title and moves window so client area preserves position (if window is not maximized)
; Переключает заголовок и перемещает окно, чтобы сохранить позицию клиентской области (если окно не развернуто)
title_switch=c2 cfixm0 cfixm1

; Make window moveable even if its title is disabled
; Позволяет быстро переместить окно мышью даже при отключенном заголовке
begin_move=sys_move
